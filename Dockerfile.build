FROM ghcr.io/nxtcoder17/nix AS builder
WORKDIR /app

RUN --mount=type=bind,source=flake.nix,target=flake.nix \
  --mount=type=bind,source=flake.lock,target=flake.lock \
  <<EOF
nix develop --verbose --command echo "nix setup complete"
EOF

ARG GOMODCACHE=/cache/gomodcache
ARG GOCACHE=/cache/gocache

ENV GOMODCACHE=${GOMODCACHE}
ENV GOCACHE=${GOCACHE}
ENV CGO_ENABLED=0

RUN --mount=type=bind,source=flake.nix,target=flake.nix \
  --mount=type=bind,source=flake.lock,target=flake.lock \
  --mount=type=bind,source=go.mod,target=go.mod \
  --mount=type=bind,source=go.sum,target=go.sum \
  --mount=type=cache,target=$GOMODCACHE \
  --mount=type=cache,target=$GOCACHE \
  <<EOF
time nix develop --command go mod download -x -json
echo "DOWNLOADED go modules"
EOF

RUN mkdir -p /out
SHELL ["bash", "-c"]
RUN mkdir -p /out
RUN --mount=type=bind,source=.,target=/app \
  --mount=type=cache,target=$GOMODCACHE \
  --mount=type=cache,target=$GOCACHE \
  <<EOF
arch_list=("amd64" "arm64")
os_list=("linux" "darwin")

for os in "${os_list[@]}"; do
  for arch in "${arch_list[@]}"; do
    echo "ðŸš§ building binary for os=$os arch=$arch"
    export GOARCH=$arch
    export GOOS=$os

    binary=/tmp/bin/nixy-$GOOS-$GOARCH
    time nix develop --command go build -v -o $binary -ldflags="-s -w" -tags urfave_cli_no_docs ./cmd/
    echo "BUILT binary [$GOOS/$GOARCH]"
  done
done

mv /tmp/bin/* /out
EOF

FROM scratch
COPY --from=builder /out/ .
